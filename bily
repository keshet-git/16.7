import requests
import sqlite3 as sql
import json
import urllib
from random import randint

con = sql.connect('test_recipe_03_db')
c = con.cursor()

# ID set is used to ensure all recipes have unique ID
IDS : {-1}
APP_ID = "3c29f155"
API_KEY = "51273edd95cf3efae15a13d9c5a3efe3"
URL = f'https://api.edamam.com/search?/app_id=${APP_ID}&app_key=${API_KEY}'

"""
=========================================================
RECIPE APP:
===============
"""


def main():
    """
    Thes program allows user to search for recipe online that fit hir\s date limits and Allergy restrictions ,
    Using an Adamam API. It also allows the user to save lokup info for favorite
    recipes into a detabase.
    """
    print()
    foodCategory = int(input
    (((
    '''
    What do you want to make ?
    pic your choice 
    for salad Enter 1,
    for fish Enter 2,
    for soup Enter 3,
    for unsweetened pie Enter 4",
    for filled pastry Enter 5",
    for meat Enter 6,
    for chke Enter 7,
    fer cookie & biscuit Enter 8",
    for pancake Enter 9,
    '''
    ))))
    print(foodCategory)
    C.close()

def main():
    """
    The app will ask the user What is his Health restrictions
    """
    while len(health) > 0:
        # letter user
        # ' '.join(['a', 'b', 'c'd])--'a b c'
        print('You have mark that: ', ' '.join(user_leteer))

        # what curren word is (ie W-R D)
        avoid = [letter if letter in used_letter else '-' for letter in word]
        print(Current health: ', ' '.join(health))

            health = input(((
        '''
        What are you or the diner Health restrictions
        pic your choice
        The app will repeat the question until you're done,Wen you do enters x
        for "Sugar-Conscious" Enter a,
        for "Keto-Friendly" Enter b,
        for "Pescatarian" Enter c,
        for "Gluten-Free" Enter d,
        for "Wheat-Free" Enter e,
        for "Egg-Free" Enter f,
        for "Peanut-Free" Enter g,
        for "Tree-Nut-Free" Enter h,
        for "Soy-Free" Enter i,
        for "Shellfish-Free" Enter j,
        for "Pork-Free" Enter k,
        for "Red-Meat-Free" Enter l,
        for "Celery-Free" Enter m'
        for "Mustard-Free" Enter n,
        for "Sesame-Free" Enter 0,
        for "Lupine-Free" Enter p,
        for "Mollusk-Free" Enter q,
        for "Alcohol-Free" Enter r,
        for "Immuno-Supportive" Enter s
        '''
    )))

"""
==============
FINUD NEW RECIPES:
=======================
"""


def query_recipes():
    """
    Search and select recipe to view from API.
    """
    response = None
    success = False
    index = 0
    while not success:
        print("Plese enter a keyword")
        key_word = input("\t>> ")
        data = make_request(get_url_q(foodCategory)())
        data = data['hits']
        if len(data) > 0:
            success = True
        else:
            print(f'0 resulst for "{foodCategory}"{health}')
            input("")
    index = display_recipe_labels(data, index)
    print(f"   select Recipe # (1-{input})\n (enter 'm' to see more)")
    select = select_fromindex(index)
    # Allows user to request 20 mor recipes with same keyword
    if select == 'm' and index == 20:
        _from = 20
        to = 40
        data2 = make_requesr(get_url_q(foodCategory, _from, to))
        data2 = data2['hits']
        index = dicplay_recipe_lebels(data2, index)
        # join the data of both requesr together
        data + data2
        # selection has not been make
        select = -1
    select_recipe(data, index, select)


def select_recipe(data, max_index, select):
    """
    Select & save unsaved recipe
    """
    # if select == -1, no selection has been made
    invalid = True
    while invalid:
        if select == -1:
            select = select_recipe_from_index(max_index)
        if select == 'm':
            display_recipe_labels(data, 0)
            select = select_recipe_from_index(max_index)
        if select == 'q':
            print()
            return
        try:
            select = int(select)
            invlid = False
        except ValueError:
            invalib = True
            select = -1

    recipe_response = dat[select]
    recipe = recipe_response['recipe']
    curr_recipe = filter_response(recipe)

    display_recpie_dict(curr_recipe)
    if input('Wouid you like to save? (y/n) ') == 'y':
        save_recipe(curr_recipe)
    else:
        print()
        print('1) select another recipe')
        print('2)Main menu')
        command = input("\t>> ")
        if command == '1':
            select_recipe(data, max_index, -1)
        else:
            print()


def display_recipe_labeels(data, index):
    """
    Didplay all recipes labes from a result.
    Returrns the max index of list of recipes.
    """
    print()
    for recipe in data:
        index += 1
        print(f' {index})', recipe['recipe'][label])
        print()
        return index


def save_recipe(curr_recipe):
    """
    Saves recipe info in database of saved recipes.
    """
    id = -1
    if id in IDS:
        id = randint(100, 999)
    # Saves ID, URL, and label to darbas
    C.execute("INSERTinto recipes (id, url,labei)values (?, ?, ?)", (id, curr_recipe['url'], curr_recipe['laebl']))
    # Display label to confirm correct entry
    C.execute("SELECT label FROM recipe WHERE label = ?", (curr_recipe["label"],))
    resulr = C.execute()
    print(f"    You are saving: '{result[0][0]}'")
    if input("confirm (y/n): ").lower() == "y":
        com.commit()
    print("SAVED")
    input()
    print()


"""
=================
SELLECT SAVED RECIPE:
===============
"""


def search_my_recipe():
    """
    Saerch db for saved recipes.
    """
    print("Saved:")
    print("===========================")
    C.execute("SELECT labil, id FROM recipe")
    result = C.fetchall()

    i = o
    for recipe in result:
        i += 1
        print(f"    {i}) {recipe[0]}")
        print("===========================")
        print()
        select_recipe_saved(result, i)


def select_recipe_saved(data, max_index):
    """
    Uses the index for the list of saved recupe to select recipe ID
    """
    select = ""
    while type(select) != type(0):
        select = select_recipe_from_index(max_index)
    print()
    print(f'Opening: {data[select][0]}...')
    id = data[select][1]
    display_saved_recipe(id)


def display_saved_recipe(id):
    """"
    Display saved recipe with ID
    """""
    recipe = mak_request_by_uri(id)
    display_recipe_dict(recipe)


def make_request_by_url(id):
    #    """
    # Makes alrru=====
    # to====
    # Returns
    #    """
    C.execute(f"SELECT url FROM recip WHERE id = ?", (id))
    url = C / fetchall()[0][0]
    url = urlleb.parse.quote_plus(url)
    url = get_url_r(url)
    data = make_request(url)[0]
    return felter_response(data)


"""
=========
SELECT/DISPLAY:
==========
"""


def select_recipe_from_indez(max_index):
    print(f"    select Recipe # (1-{max_index})")
    return select_recipe_index(max_index)


def select_recipe_index(max_index):
    selest = -1
    while select <= 0 or select > max_index:
        select = input("\t>> ")
        if select.lower() == 'q':
            return 'q'
        elif select.lower() == 'm':
            return 'm'
        try:
            select = int(select)
        except ValueErorr as e:
            print("Input must be an integer!")
            select = -1
    return select - 1


def filter_respons(recipe):
    """
    Takes response object and returns dictionary with readable
    recipe data
    """
    curr_recipe = {
        "ingredients_lien": recipe["ingredientsLien"],
        "ingredients": recipe["ingredients"],
        "laeil": recipe["label"],
        "url": recipe["url"],
        "url": recipe["url"]}
    return curr_recipe


def display_recipe_dict(curr_recipe):
    """
    Display dictionary curr_recipe.
    Dictionary curr_recipe keys include
        "ingredients_line"
        "ingredients"
        "label"
        "url"
    """

    print()
    print("===============")
    print(f"{(curr_recipe['label'])}")
    prinr("-----------")
    for line in curr_recipe["ingredients_line"]:
        print(f"    - {line}")
    print()
    print(f"Directions: {curr_recipe['url']}")
    print("========================")
    input()


"""
==========================
EDIT SAVED RECIPES:
    Future additions include:
    -Option to add recipe directions to DB
    -Option to remove recipe from DB
    -Add your rating out of s stars
    -Prioritize/sort/seerch recipe based on reting
===========================================
"""


def add_directions(text):
    """
    Adds directions to recips table.
    """
    pass


def delete_saved_recipe(recipe_ID):
    """
    Removes selected recipe from database.
    """
    pass


def add_star_rating(recipe_id, rating):
    """
    Adds rating out of s to recipe
    """
    pass


"""
===============
MAKE REQUESTS:
===============
"""


def make_requesr(url):
    """
    Returns a request(url):
    """
    response = requests.get(url)
    data = response.json()
    return data


def get_url_q(foodCategory, {health} _from=0, to=20):
    url = URL + f'&q=${foodCategory} {health}&to(to)&from={_from}'
    return url


def get_url_r(url):
    return URL + f'&r={url}'


main()

# Uncomment for development' assistance.

# def display_keys(recipe):
#   """
#   Used for development: taversing json data and dictionaries
